#summary One-sentence summary of this page.

= 1.Introduction =

*NOTICE: THE INFORMATION PROVIDED HERE IS NOT COMPLETE, AND MAY CHANGE AT ANY TIME.*

This documentation describes the file system designed and used in Micron System, and gives introduces how to use the facilitied to implement a new file system support.

= 2.Architecture =

The Micron System semi-realtime system implements UNIX-compliant file system and provides optimizations to solve some realtime issues, the structure of the design is as follows:

{{{
# File System Internal Structure
___________________________________________(File System)||(Device Module)__
[VFS Layer] >>>>>>>>>>>>>>>>>>>>>>>>>> |                ||
            > [Mount Point] > [MFS]    |                ||
                            > [E2FS]   |                ||
                            > [JFFS]   |                ||
                            > [FAT]  > | [Sector Cache] || > [Disk Driver]
            > [Inode Cache] < ^^^^^^   |                ||
}}}

The file system design used in Micron System implements 2 layers of caching, which provides senior effectiency in both inode management and disk read/write. The system is implemented in 3 layers and 4 parts:
 # VFS Layer
 # Mount Point
 # Inode Cache
 # Sector Cache

*Design Requirements:*
  # As the file system may be need in device driver initialization time, to provide the same model of charateristic in both dynamically loaded and statically linked modules, any interface function or mechanisam implemented in File System should be initialization-less.
  # File system implementation layer should also can be implented as modules, which are both statically and dynamically loadable during anytime of execution.
  # As the need of meeting the general situations of controlling both caches, the file system implentations should all be non-specific both to mount points and devices underlying it.

== 1.The VFS Layer ==

Virtual File System Layer provides standard UNIX-compliant, non-privileged interfaces to other modules, drivers for use, and internally manages various file systems and storage hardwares.

As different from most file system implementations, the inode in Micron System is managed by a order based priority, semaphore locked allocation mechanism, and all supported file system's own file node descriptions should be translated to MFS format of inode in order to be managed by the system. Any read/write to file is performed by VFS directly on the sector cache rather than file system implementations.

The interfaces that should be implemented in VFS layer includes:
{{{
/* file node related */
int mknod (const char *path, mode_t mode, dev_t dev);
int mkfifo(const char *path, mode_t mode);
int unlink(const char *path);

/* link related */
int symlink     (const char *path1, const char *path2);
ssize_t readlink(const char *path, char *buf, size_t bufsize);

/* directory related */
int mkdir(const char *path, mode_t mode);
int rmdir(const char *path);

/* file status related */
int chmod(const char *path, mode_t mode);
int stat (const char *path, struct stat *buf);
int lstat(const char *path, struct stat *buf);

/* open file related */
int open     (const char *path, int oflag, ... );
int close    (int fildes);
ssize_t read (int fildes, void *buf, size_t nbyte);
ssize_t write(int fildes, const void *buf, size_t nbyte);
int fcntl    (int fildes, int cmd, ...);
off_t lseek  (int fildes, off_t offset, int whence);
int dup      (int fildes);
int dup2     (int fildes, int fildes2);
int fstat    (int fildes, struct stat *buf);
int fsync    (int fildes); 

/* VFS related */
int fstatvfs(int fildes, struct statvfs *buf);
int statvfs(const char *restrict path, struct statvfs *restrict buf); 

/* FS related */
void sync(void); 
}}}

== 2.Mount Point ==

== 3.Inode Cache ==

== 4.Sector Cache ==





