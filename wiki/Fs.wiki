#summary One-sentence summary of this page.

= 1.Introduction =

*NOTICE: THE INFORMATION PROVIDED HERE IS NOT COMPLETE, AND MAY CHANGE AT ANY TIME.*

This documentation describes the file system designed and used in Micron System, and gives introduces how to use the facilitied to implement a new file system support.

= 2.Architecture =

The Micron System semi-realtime system implements UNIX-compliant file system and provides optimizations to solve some realtime issues, the structure of the design is as follows:

{{{
# File System Internal Structure
___________________________________________(File System)||(Device Module)__
[VFS Layer] >>>>>>>>>>>>>>>>>>>>>>>>>> |                ||
            > [Mount Point] > [MFS]    |                ||
                            > [E2FS]   |                ||
                            > [JFFS]   |                ||
                            > [FAT]    | [Sector Cache] || [Disk Driver]
            > [Inode Cache]            |                ||
}}}

The file system design used in Micron System implements 2 layers of caching, which provides senior effectiency in both inode management and disk read/write. The system is implemented in 3 layers and 4 parts:
 # VFS Layer
 # Mount Point
 # Inode Cache
 # Sector Cache

*Design Requirements:*
  # As the file system may be need in device driver initialization time, to provide the same model of charateristic in both dynamically loaded and statically linked modules, any interface function or mechanisam implemented in File System should be initialization-less.
  # File system implementation layer should also can be implented as modules, which are both statically and dynamically loadable during anytime of execution.
  # As the need of meeting the general situations of controlling both caches, the file system implentations should all be non-specific both to mount points and devices underlying it.

= 3.File System Support Module Interface =

For each new file system's support in Micron System, the developer should write a kernel module interfacing the following structure, just like the other types of kernel modules and setup these entries in

{{{
struct fs fs[NFSENTYS];
}}}

These structures are defined in header file:

{{{
kernel\include\fs.h
}}}

{{{
struct fs
{
        /* file system probe */
        int (*probe)(dev_t dev);

        /* get file system block size */
        blkcnt_t (*blksz)(dev_t dev);

        /* load super block to buffer */
        int (*lsblk)(dev_t dev, char *buf);

        /* loading and saving nodes */
        int (*lnode)(void *sblk, struct vnode *node);
        int (*snode)(void *sblk, struct vnode *node);

        /* node allocation and releasing */
        struct vnode *(*ialloc)(void *sblk, dev_t dev);
        int (*ifree)(void *sblk, struct vnode *node);

        /* file data block allocation and releasing */
        blkcnt_t (*daddr)(void *sblk);
        blkcnt_t (*dalloc)(void *sblk, dev_t dev);
        int (*dfree)(void *sblk, dev_t dev, blkcnt_t blk);
};
}}}

For examples, you can refer to the file:
{{{
kernel\filesys\fs\mfs.c
kernel\filesys\fs\mfs.h
}}}
which is the native implementation of Micron File System and 100% match with the Micron System's VFS interface.

The key philosophy in adding a support for a new file system is *NODE DATA TRANSLATION*.



