#summary Device Driver Developer's Guide.

= Introduction =

Device drivers gives Micron System new hardware support, notice that this layer is should be only hardware specific. Protocols such as TCP/IP, File systems, etc. are implemented in other type of kernel modules.

In this article we describe some basis of Micron Device Driver Framework.

= Character Special Device =

{{{
#include <chrdev.h>
struct dev_chr
{
	int (*open )(id_t id, int oflag, mode_t mode);
	int (*close)(id_t id);
	int (*read )(id_t id, char *buf, off_t cnt);
	int (*write)(id_t id, char *buf, off_t cnt);
	int (*ioctl)(id_t id, int cmd, int arg);
};
}}}

= Block Special Device =

{{{
#include <blkdev.h>
struct dev_blk
{
	int (*open )(id_t id, int oflag, mode_t mode);
	int (*close)(id_t id);	
	int (*read )(id_t id, char *buf, off_t cnt);
	int (*write)(id_t id, char *buf, off_t cnt);
	int (*lseek)(id_t id, off_t offset, int whence);
	int (*ioctl)(id_t id, int cmd, int arg);
};

}}}

= Example Device Driver (Character Special) =

All device driver implementations should first refer to [Mod Kernel Module Developer's Guide], and here is how to use kernel module to install a new device driver:

{{{
#include <device.h>
#include <libc.h>
/* IMPLEMENTATION NOTICE:
 *   The following macros must be defined prior to use this driver:
 *   CHR_DEVICENAME      - Char device major ID in config.h
 */
struct dev_chr *device_dev = &dev_chr[CHR_DEVICENAME];
int device_open(id_t id, int oflag, mode_t mode)
{
    return 0;
}
int device_close(id_t id)
{
    return 0;
}
int device_read (id_t id, char *buf, off_t cnt)
{
    return 0;
}
int device_write(id_t id, char *buf, off_t cnt)
{
    return 0;
}
int device_ioctl(id_t id, int cmd, int arg)
{
    return 0;
}
int device_init()
{
    if(device_dev->open != 0) {
        return -1;      /* device descriptor already used */
    }
    device_dev->open = device_open;
    device_dev->close= device_close;
    device_dev->read = device_read;
    device_dev->write= device_write;
    device_dev->ioctl= device_ioctl;
    kprintf("\nhello world\n");
    return 0;           /* 0 upon success, -1 upon failure */
}
int device_exit()
{
    device_dev->open = 0;
    device_dev->close= 0;
    device_dev->read = 0;
    device_dev->write= 0;
    device_dev->ioctl= 0;
    kprintf("\ngoodbye world\n");
    return 0;    /* 0 upon success, -1 upon failure */
}
REGISTER_MODULE(device, "Device Description", device_init, device_exit);
}}}

NOTICE: Theoretically not all operations should be implemented as function, but if you are not familiar with the internal working of modulization, please implement them all.