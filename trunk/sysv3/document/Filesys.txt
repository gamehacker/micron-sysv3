FILE SYSTEM DOCUMENTATION					*Filesys*
===============================================================================

Introduction~

In Micron System, new file systems can be added to kernel support by writing
a kernel module called file system module.

Currently, Micron System only supports file systems who's blocks is no more
than 4096 bytes.

The core mechanism used in Micron File System is called translation interface
which will be introduced in detail in the following texts.

Structure~

Micron File System contains 3 layers, which can be presented in the following
diagram:

>	| (VFS)                           | (Disk Cache)     || (Device Driver)
>	|---------------------------------|------------------||----------------
>	|[VFS]--------------------------> |                  ||
>	|     -> [Mount Point]            |                  ||
>	|     -> [Vnode Cache]            | [Sector Cache]-> || [Blkdev]
>	|     -> [File System]-> [MFS ]-> |                  ||
>	|                     -> [FAT ]-> |                  ||
>	|                     -> [JFFS]-> |                  ||
>	|                     -> [Ext2]-> |                  ||

The VFS layer provides system call redirection. The system call here is only
used by kernel modules, which is not privileged by uid and gid.

The Mount Point provides entry point to each mounted media, such as root node
and device number.

The File System provides interface standard to implement for each file system,
the operations defined for each file system type is ONLY RELEATED TO INODES and
will not operate on data read/write directly.

The sector cache provides fast cache mechanism avoidind re-reading the
frequently used data blocks from the media on each visit.

The inode cache provides cache mechanism for each mount point to avoid re-read
frequently used inodes from media on each visit.

Interface~

>	struct fs
>	{
>		/* file system probe */
>		int (*probe)(dev_t dev);
>	
>		/* get file system block size */
>		blkcnt_t (*blksz)(dev_t dev);
>		
>		/* load super block to buffer */
>		int (*lsblk)(dev_t dev, char *buf);
>
>		/* loading and saving nodes */
>		int (*lnode)(void *sblk, struct vnode *node);
>		int (*snode)(void *sblk, struct vnode *node);
>	
>		/* node allocation and releasing */
>		struct vnode *(*ialloc)(void *sblk, dev_t dev);
>		int (*ifree)(void *sblk, struct vnode *node);
>	
>		/* file data block allocation and releasing */
>		blkcnt_t (*daddr)(void *sblk);
>		blkcnt_t (*dalloc)(void *sblk, dev_t dev);
>		int (*dfree)(void *sblk, dev_t dev, blkcnt_t blk);
>	};

For every file system support package, each of the functions defined in the
structure above should be implemented, for a real life reference, you can read
filesys/fs/mfs.c filesys/fs/mfs.h files.

The probe method provides mechanism for detection whether a continuous blocks
of data is in the file system format described in the support module, if true,
return 0, else return -1;

The blksz method provides ways to require the target file system's block size,
note that block size is determined by the data on block devce rather than
fixed values for specified file system. Some file system specify the block
size data in their super block.

The lsblk method loads the specified blocks of data's super block into
location specified by buf pointer.

The lnode method loads a existing file descriptor node from media and translate
it to vnode format.

The snode method saves a file specified by vnode format and translate it back
to the inode structure specified by the file system and save it to the target
media.

The ialloc allocates a new inode specified by file system and translates it to
vnode format and return the newlly allocated vnode.

The ifree method releases the use of a inode specified by vnode and make it
available for new allocations.

The daddr method returns data block's entry block index.

The dalloc method allocates a unused data block and dfree method releases it
for reallocation.

Tutorial~

As the file system interface is little complicated to explain in a example,
the best way to learn how to do this is by reading the example:

>	kernel/filesys/fs/mfs.*

For more information or have a question to ask, please contact:

>	martintang25 (AT) gmail (DOT) com

===============================================================================
vim:ft=help
